<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[David Heidt's Blog]]></title>
  <link href="http://blog.heidt.biz/atom.xml" rel="self"/>
  <link href="http://blog.heidt.biz/"/>
  <updated>2012-09-18T12:37:31+02:00</updated>
  <id>http://blog.heidt.biz/</id>
  <author>
    <name><![CDATA[David Heidt]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Setting up Ubuntu 12.04 (precise pangolin) as XEN Dom0]]></title>
    <link href="http://blog.heidt.biz/blog/2012/09/17/setting-up-ubuntu-12-dot-04-precise-pangolin-as-xen-dom0/"/>
    <updated>2012-09-17T18:39:00+02:00</updated>
    <id>http://blog.heidt.biz/blog/2012/09/17/setting-up-ubuntu-12-dot-04-precise-pangolin-as-xen-dom0</id>
    <content type="html"><![CDATA[<h2>Setting up a XEN Dom0 with a LTS release of Ubuntu Linux is easy again. Hooray!</h2>

<p>First, install a standard Ubuntu Server System. Select no extras but ssh server.</p>

<h3>Install the XEN packages</h3>

<pre><code># sudo aptitude install xen-hypervisor-amd64
</code></pre>

<h3>modify grub configuration in /etc/default/grub</h3>

<figure class='code'><figcaption><span>/etc/default/grub  </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="c"># If you change this file, run &#39;update-grub&#39; afterwards to update</span>
</span><span class='line'><span class="c"># /boot/grub/grub.cfg.</span>
</span><span class='line'>
</span><span class='line'><span class="nv">GRUB_DEFAULT</span><span class="o">=</span><span class="s2">&quot;Xen 4.1-amd64&quot;</span>
</span><span class='line'><span class="c">#GRUB_HIDDEN_TIMEOUT=0</span>
</span><span class='line'><span class="nv">GRUB_HIDDEN_TIMEOUT_QUIET</span><span class="o">=</span><span class="nb">true</span>
</span><span class='line'><span class="nv">GRUB_TIMEOUT</span><span class="o">=</span>3
</span><span class='line'><span class="nv">GRUB_DISTRIBUTOR</span><span class="o">=</span><span class="sb">`</span>lsb_release -i -s 2&gt; /dev/null <span class="o">||</span> <span class="nb">echo </span>Debian<span class="sb">`</span>
</span><span class='line'><span class="nv">GRUB_CMDLINE_LINUX_DEFAULT</span><span class="o">=</span><span class="s2">&quot;&quot;</span>
</span><span class='line'><span class="nv">GRUB_CMDLINE_LINUX</span><span class="o">=</span><span class="s2">&quot;rootdelay=180&quot;</span>
</span><span class='line'>
</span><span class='line'><span class="c"># Uncomment to disable graphical terminal (grub-pc only)</span>
</span><span class='line'><span class="c">#GRUB_TERMINAL=console</span>
</span><span class='line'>
</span><span class='line'><span class="c"># The resolution used on graphical terminal</span>
</span><span class='line'><span class="c"># note that you can use only modes which your graphic card supports via VBE</span>
</span><span class='line'><span class="c"># you can see them in real GRUB with the command `vbeinfo&#39;</span>
</span><span class='line'><span class="c">#GRUB_GFXMODE=640x480</span>
</span><span class='line'>
</span><span class='line'><span class="c"># Uncomment if you don&#39;t want GRUB to pass &quot;root=UUID=xxx&quot; parameter to Linux</span>
</span><span class='line'><span class="c">#GRUB_DISABLE_LINUX_UUID=true</span>
</span><span class='line'>
</span><span class='line'><span class="c"># Uncomment to disable generation of recovery mode menu entries</span>
</span><span class='line'><span class="c">#GRUB_DISABLE_LINUX_RECOVERY=&quot;true&quot;</span>
</span><span class='line'>
</span><span class='line'><span class="c"># Uncomment to get a beep at grub start</span>
</span><span class='line'><span class="c">#GRUB_INIT_TUNE=&quot;480 440 1&quot;</span>
</span><span class='line'>
</span><span class='line'><span class="c"># Disable OS prober to prevent virtual machines on logical volumes from appearing in the boot menu.</span>
</span><span class='line'><span class="nv">GRUB_DISABLE_OS_PROBER</span><span class="o">=</span><span class="nb">true</span>
</span><span class='line'>
</span><span class='line'><span class="c"># Xen boot parameters for all Xen boots</span>
</span><span class='line'><span class="c">#GRUB_CMDLINE_XEN=&quot;&quot;</span>
</span><span class='line'>
</span><span class='line'><span class="c"># Xen boot parameters for non-recovery Xen boots (in addition to GRUB_CMDLINE_XEN)</span>
</span><span class='line'><span class="nv">GRUB_CMDLINE_XEN_DEFAULT</span><span class="o">=</span><span class="s2">&quot;dom0_mem=512M&quot;</span>
</span></code></pre></td></tr></table></div></figure>


<p>I set the memory to 512MB for the Dom0. If you don&#8217;t plan additional services and use this host as Dom0 only, this is largely enough.</p>

<h2>update the bootloader:</h2>

<pre><code># sudo update-grub
</code></pre>

<h2>select default toolstack</h2>

<figure class='code'><figcaption><span>/etc/default/xen  </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="c"># Configuration for Xen system</span>
</span><span class='line'><span class="c"># ----------------------------</span>
</span><span class='line'>
</span><span class='line'><span class="c"># There exists several tool stacks to configure a Xen system.</span>
</span><span class='line'><span class="c"># ?~@?</span>
</span><span class='line'><span class="c"># Attention: You need to reboot after changing this!</span>
</span><span class='line'><span class="nv">TOOLSTACK</span><span class="o">=</span><span class="s2">&quot;xl&quot;</span>
</span></code></pre></td></tr></table></div></figure>


<p>I prefer <em>xl</em>, but you can also use the old <em>xm</em> toolstack</p>

<h2>reboot and run</h2>

<pre><code># xl list 
</code></pre>

<p>this should give you an output like this:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>Name                                        ID   Mem VCPUs   State   Time(s)
</span><span class='line'>Domain-0                                     0   511     8     r-----       9.9</span></code></pre></td></tr></table></div></figure>


<p>also, the <em>xl info</em> command gives you the right amount of memory you have on your system:</p>

<figure class='code'><figcaption><span>output on a 64G machine </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'># xl info | grep memory
</span><span class='line'>total_memory           : 65523
</span><span class='line'>free_memory            : 64169</span></code></pre></td></tr></table></div></figure>


<p>and that&#8217;s it.</p>

<h4>coming up next:</h4>

<p>DomU setup (paravirtualized Linux Guests, HVM Windows Guests)</p>

<h4>recipe based on:</h4>

<ul>
<li><a href="https://help.ubuntu.com/community/XenProposed">https://help.ubuntu.com/community/XenProposed</a></li>
<li><a href="http://wiki.debian.org/Xen">http://wiki.debian.org/Xen</a></li>
<li>and several years playing around with XEN :)</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[playing with nginx - manipulating GET parameters]]></title>
    <link href="http://blog.heidt.biz/blog/2012/07/23/playing-with-nginx-manipulating-get-parameters/"/>
    <updated>2012-07-23T13:07:00+02:00</updated>
    <id>http://blog.heidt.biz/blog/2012/07/23/playing-with-nginx-manipulating-get-parameters</id>
    <content type="html"><![CDATA[<h2>forced GET Parameters</h2>

<p>If you want a virtual host or a location to be jailed to certain GET parameters, use the rewrite module:</p>

<figure class='code'><figcaption><span>force one GET parameter  </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>location /list {
</span><span class='line'>  rewrite ^(.*)$ $1?list=true
</span><span class='line'>}</span></code></pre></td></tr></table></div></figure>


<p>an even smarter solution is to transport existing GET parameters, too:</p>

<figure class='code'><figcaption><span>force one and preserve existing GET parameters </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>location /list {
</span><span class='line'>
</span><span class='line'>    rewrite ^(.*)$ $1?list=true&$args break;
</span><span class='line'>
</span><span class='line'>}</span></code></pre></td></tr></table></div></figure>


<p>this way, nginx forwards all other GET parameters. The jailed <em>&#8220;list=true&#8221;</em> should be safe, too. In my tests, the app behind used the <em>&#8220;first come first serve&#8221;</em> method:</p>

<pre><code>http://example.com/list/?list=false
</code></pre>

<p>rewrites to:</p>

<pre><code>/list/?list=true&amp;list=false
</code></pre>

<p>evaluates to:</p>

<pre><code>list = true
</code></pre>

<h2>use the reverse proxy module for API calls</h2>

<p>With the above, accessing external APIs gives you more possibilities:
To hide details of the api calls (credentials, keys, service name, etc.) just add parameters at proxy level, keeping it away from your app and your visitors:</p>

<figure class='code'><figcaption><span>hidden API call </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>location /example-api {
</span><span class='line'>
</span><span class='line'>  rewrite ^(.*)$ $1?apikey=secretKey&userid=exampleuser&$args break;
</span><span class='line'>  proxy_pass http://api.example.com;
</span><span class='line'>
</span><span class='line'>}</span></code></pre></td></tr></table></div></figure>


<p>http basic auth should work, too (I didn&#8217;t test this, Feedback appreciated!):</p>

<figure class='code'><figcaption><span>hidden API call with http basic auth </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>location /example-api {
</span><span class='line'>
</span><span class='line'>  rewrite ^(.*)$ $1?apikey=secretKey&$args break;
</span><span class='line'>  proxy_pass http://user:password@api.example.com;
</span><span class='line'>
</span><span class='line'>}</span></code></pre></td></tr></table></div></figure>



]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[ssl websocket proxy with stunnel howto]]></title>
    <link href="http://blog.heidt.biz/blog/2012/07/19/ssl-websocket-proxy-with-stunnel-howto/"/>
    <updated>2012-07-19T14:01:00+02:00</updated>
    <id>http://blog.heidt.biz/blog/2012/07/19/ssl-websocket-proxy-with-stunnel-howto</id>
    <content type="html"><![CDATA[<p>Recently we made up a new rails webapp using the <a href="http://pusher.com/docs/pusher_protocol">pusher protocol</a> in combination with <a href="https://github.com/stevegraham/slanger">Slanger</a> as websocket server.</p>

<p>The site needed to support both, plain http and encrypted https, so I decided to start slanger in standard mode (no ssl) and put a ssl-terminating proxy in front to handle the wss:// URIs</p>

<p>There were rumors that <a href="http://www.apsis.ch/pound/">pound</a> was capable of proxying TCP requests. I work with pound for quite a long time and did not manage to get it working. However, <a href="http://www.stunnel.org/">stunnel</a> offered a fast and solid  solution:</p>

<p>The code snippets apply to Ubuntu 10.04, but this should work on other environments, too.
I installed stunnel with</p>

<pre><code># aptitude install stunnel4
</code></pre>

<p>and ended up with this configuration:</p>

<figure class='code'><figcaption><span>/etc/stunnel/stunnel.conf  </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>; Certificate/key is needed in server mode and optional in client mode
</span><span class='line'><span class="nv">cert</span> <span class="o">=</span> /path/to/cert-or-cert-chain.pem
</span><span class='line'><span class="nv">key</span> <span class="o">=</span> /path/to/private.key
</span><span class='line'>
</span><span class='line'>; Protocol version <span class="o">(</span>all, SSLv2, SSLv3, TLSv1<span class="o">)</span>
</span><span class='line'><span class="nv">sslVersion</span> <span class="o">=</span> all
</span><span class='line'>; no, we don<span class="err">&#39;</span>t want SSLv2
</span><span class='line'><span class="nv">options</span> <span class="o">=</span> NO_SSLv2
</span><span class='line'>; Some extra strong ciphers
</span><span class='line'><span class="nv">ciphers</span> <span class="o">=</span> ECDHE-RSA-AES256-SHA384:AES256-SHA256:RC4:HIGH:!MD5:!aNULL:!EDH:!AESGCM
</span><span class='line'>
</span><span class='line'>; Some security enhancements <span class="k">for </span>UNIX systems - comment them out on Win32
</span><span class='line'><span class="nv">chroot</span> <span class="o">=</span> /var/lib/stunnel4/
</span><span class='line'><span class="nv">setuid</span> <span class="o">=</span> stunnel4
</span><span class='line'><span class="nv">setgid</span> <span class="o">=</span> stunnel4
</span><span class='line'>; PID is created inside the chroot jail
</span><span class='line'><span class="nv">pid</span> <span class="o">=</span> /stunnel4.pid
</span><span class='line'>
</span><span class='line'>; Some performance tunings
</span><span class='line'><span class="nv">socket</span> <span class="o">=</span> l:TCP_NODELAY<span class="o">=</span>1
</span><span class='line'><span class="nv">socket</span> <span class="o">=</span> r:TCP_NODELAY<span class="o">=</span>1
</span><span class='line'>;<span class="nv">compression</span> <span class="o">=</span> zlib
</span><span class='line'>
</span><span class='line'>
</span><span class='line'><span class="o">[</span>https<span class="o">]</span>
</span><span class='line'><span class="nv">accept</span>  <span class="o">=</span> &lt;your public IP&gt;:8443
</span><span class='line'>
</span><span class='line'>; slanger server listens on port 8080
</span><span class='line'><span class="nv">connect</span> <span class="o">=</span> &lt;public or <span class="nb">local </span>IP&gt;:8080
</span></code></pre></td></tr></table></div></figure>


<p>If you can spare an extra server or an additional IP Address for your websocket server, it may be better to use the standard ports 80 and 443.</p>

<p>Possible pitfall: make sure, the hostname (don&#8217;t use an IP Address!) of yor pusher clients matches the common name of the certificate provided to stunnel. Otherwise some browsers (chrome at least) will fail silently when connecting to secure websocket URIs (wss://example.com/).</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[installing Icinga and pnp4nagios on Ubuntu 12.04 (precise pangolin)]]></title>
    <link href="http://blog.heidt.biz/blog/2012/06/19/installing-icinga-and-pnp4nagios-on-ubuntu-12-dot-04-precise-pangolin/"/>
    <updated>2012-06-19T11:30:00+02:00</updated>
    <id>http://blog.heidt.biz/blog/2012/06/19/installing-icinga-and-pnp4nagios-on-ubuntu-12-dot-04-precise-pangolin</id>
    <content type="html"><![CDATA[<p>This is actually so easy and painless, I had to write this down:</p>

<p>I presume installing apache2 is no problem for you. This short tutorial covers a very minimalistic icinga installation, no idoutils, no distribution, no check_mk. So, let&#8217;s do it:</p>

<pre><code>aptitude install icinga pnp4nagios
</code></pre>

<p>and follow debconf&#8217;s instructions</p>

<p>In /etc/icinga/icinga.cfg change the following variable</p>

<pre><code>process_performance_data=1
</code></pre>

<p>and set this one:</p>

<pre><code>broker_module=/usr/lib/pnp4nagios/npcdmod.o config_file=/etc/pnp4nagios/npcd.cfg
</code></pre>

<p>Now, edit /etc/default/npcd and set</p>

<pre><code>RUN="yes"
</code></pre>

<p>finally, enable the views in icingas standard templates:
for hosts, edit /etc/icinga/objects/generic-host_icinga.cfg
and add</p>

<pre><code>action_url  /pnp4nagios/graph?host=$HOSTNAME$
</code></pre>

<p>for services, edit /etc/icinga/objects/generic-service_icinga.cfg
and add:</p>

<pre><code>action_url  /pnp4nagios/graph?host=$HOSTNAME$&amp;srv=$SERVICEDESC$
</code></pre>

<p>One last thing: change this line in  /etc/apache2/conf.d/pnp4nagios.conf from the &#8220;nagios3&#8221; directory to &#8220;icinga&#8221;:</p>

<pre><code>AuthUserFile /etc/icinga/htpasswd.users
</code></pre>

<p>finally, start npcd and restart icinga by executing</p>

<pre><code># service apache2 restart
# service npcd start
# service icinga restart
</code></pre>

<p>login to http://hostname/icinga with user icingaadmin and the password you specified. enjoy icinga with pnp4nagios!</p>

<p>One last hint: If you&#8217;re still using nagios and thinking about using icinga: Just copy your nagios config files to icinga and be much happier. In most cases this awesome fork works out of the box!</p>
]]></content>
  </entry>
  
</feed>
